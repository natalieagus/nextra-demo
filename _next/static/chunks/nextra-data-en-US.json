{"/_app":{"title":" App","data":{"":""}},"/about":{"title":"About Nextra","data":{"":"Nextra was initially created by Vercel members\nShu Ding and\nPaco Coursey in 2020. Since 2021,\nYixuan Xu contributed tremendously to the\nproject. In 2022, Dimitri Postolov from\nThe Guild joined the core team to help with the\ndevelopment of 2.0.","team#Team":"Currently, the project is maintained by Shu Ding\nand Dimitri Postolov. You can check out the full\nlist of contributors on\nGitHub.","credits#Credits":"Nextra is powered by these incredible open source projects:\nhttps://reactjs.org\nhttps://nextjs.org\nhttps://turbo.build\nhttps://mdxjs.com\nhttps://pnpm.io\nhttps://tailwindcss.com\nhttps://github.com/pacocoursey/next-themes\nhttps://github.com/garmeeh/next-seo\nhttps://github.com/hashicorp/next-mdx-remote\nhttps://github.com/shikijs/shiki\nhttps://github.com/nextapps-de/flexsearch\nhttps://github.com/atomiks/rehype-pretty-code\nhttps://github.com/Brooooooklyn/simple-git\nhttps://github.com/francoismassart/eslint-plugin-tailwindcss","design-assets#Design Assets":"Feel free to use the Nextra logo and other assets in your project. But please\ndon't modify the logo, and don't use the logo to represent your project or\nproduct.\nName\tDescription\tPreview\tIcon\tUseful for favicons, app icons, link icons, etc.\n\nLogo\tFull Nextra logo\n\nSocial Card\tThe Nextra social card","license#License":"The Nextra project and themes are licensed under the MIT license."}},"/docs/blog-theme":{"title":"Nextra Blog Theme","data":{"":"Docs for this theme is under construction."}},"/docs/blog-theme/start":{"title":"Get Started","data":{"":"Docs for this theme is under construction.\n\nAn example of the blog theme can be found here.\nSimilar to the Docs Theme, you can install the blog theme with the following commands:","quick-start-from-template#Quick Start from Template":"","start-as-new-project#Start as New Project":"","install#Install":"To create a Nextra Docs site manually, you have to install Next.js, React, Nextra, and Nextra Blog Theme. In your project directory, run the following command to install the dependencies:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you already have Next.js installed in your project, you only need to\ninstall nextra and nextra-theme-blog as the add-ons.","add-nextjs-config#Add Next.js Config":"Create the following next.config.js file in your project’s root directory:\n\nWith the above configuration, Nextra can handle Markdown files in your Next.js project, with the specified theme. Other Nextra configurations can be found in Guide.","create-blog-theme-config#Create Blog Theme Config":"Lastly, create the corresponding theme.config.jsx file in your project’s root directory. This will be used to configure the Nextra Blog theme:","ready-to-go#Ready to Go!":"Now, you can run the pnpm next command to start developing the project! 🎉"}},"/docs/custom-theme":{"title":"Custom Theme","data":{"":"A theme in Nextra works like a layout, that will be rendered as a wrapper for\nall pages. This docs will walk you through the process of creating a custom\ntheme.Optionally, you can deploy an example and build further on it by following the\nbelow steps:","create-a-custom-theme#Create a Custom Theme":"","configure-nextra-to-use-the-theme#Configure Nextra to Use the Theme":"First, you need to tell Nextra to use your custom theme file instead of official\nones. In your Next.js config, you can pass the path to your theme file to the\nNextra plugin:","create-a-basic-theme#Create a Basic Theme":"You can now start working on your theme! In your root directory, create the\ncorresponding theme.tsx file with basic content:\n\nIt accepts a children prop, which is the MDX content of the current page, and\nwraps some other elements around the content. After creating the theme, you can\nsimply add a MDX file as pages/index.mdx and see the result:\n\n\n\nInside your theme layout, you can use CSS imports or other ways to style it.\nNext.js hooks such as useRouter, Head are also available.","render-metadata-for-the-active-page#Render Metadata for the Active Page":"Other than children, some other useful props are passed to the theme layout\ntoo. With the pageOpts props, the theme can access the page’s meta\ninformation.For example, let’s implement these features:\nRender the page title in <title>\nShow a simple table of contents\nAdd a meta tag for og:image via the front matter","use-page-map-of-the-entire-site#Use Page Map of the Entire Site":"Now, if you want to render something like a sidebar or a navigation bar, which\nrelies on information of not only the current page but also other pages, you can\nuse the pageMap value.For example, we can render a simple navigation list with all the pages in the\ntop level:\n\nThere are other item kinds such as Folder (for directories) and Meta (for\n_meta.json files). All the items are typed so you can easily know the\nproperties.","advanced-usage#Advanced Usage":"Docs for advanced usage are under construction."}},"/docs/docs-theme":{"title":"Nextra Docs Theme","data":{"":""}},"/docs/docs-theme/built-ins":{"title":"Built-ins","data":{"":"The Docs Theme includes a couple of built-in components that you can use to\nbetter style your documentation:"}},"/docs/docs-theme/built-ins/steps":{"title":"Step Component","data":{"":"A built-in component of the Docs Theme to turn a numbered list into a visual\nrepresentation of steps.","example#Example":"","this-is-the-first-step#This is the first step":"This is the first step description.","this-is-the-second-step#This is the second step":"This is the second step description.","this-is-the-third-step#This is the third step":"This is the third step description.","usage#Usage":"Wrap a set of markdown h3 headings with the Steps component to turn them into\nvisual steps.","step-1#Step 1":"Content for step 1.","step-2#Step 2":"Contents for step 2."}},"/docs/docs-theme/built-ins/tabs":{"title":"Tab Component","data":{"":"A built-in tab component of the Docs Theme.","example#Example":"pnpm: Fast, disk space efficient package manager.\n\nnpm is a package manager for the JavaScript programming language.\n\nYarn is a software packaging system.","usage#Usage":"","default#Default":"","default-selected-index#Default Selected Index":"You can use the defaultIndex prop to set the default tab index:\n\nAnd you will have npm as the default tab:\n\npnpm: Fast, disk space efficient package manager.\n\nnpm is a package manager for the JavaScript programming language.\n\nYarn is a software packaging system."}},"/docs/docs-theme/page-configuration":{"title":"Page Configuration","data":{"":"In Nextra, the site and page structure can be configured via the co-located\n_meta.json files. In the docs theme, there are some extra options available to\ncustomize it further.Those configurations affect the overall layout of the theme, especially the\nnavigation bar and the sidebar.\nRead more about Nextra's _meta.json files\nhere.","pages#Pages":"The title and order of a page shown in the sidebar should be configured in the\n_meta.json file as key-value pairs. For example, if you have the following\nfile structure:\n\n\n\n\n\n\n\n\n\n\n\nYou can define how the pages are shown in the sidebar via the _meta.json file:\n\n\nIf any routes are not listed in the _meta.json file, they will be appended\nto the end of the sidebar and sorted alphabetically, and the title will be\nformatted with Title.","folders#Folders":"Folders can be configured in the same way as pages. For example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe top-level _meta.json file contains the meta information for the top-level\npages and folders:\n\nAnd the nested _meta.json file contains the meta information for pages in the\nsame folder:\n\nThis way, information for pages are grouped together in directories. You can\nmove directories around without having to change the _meta.json file.","folders-with-index-page#Folders with Index Page":"What if I want to have a folder with an index page? We can add a MDX page with\nthe same name and in the same directory as the folder. Let's say we want to add\n/fruits route in the example above, we can create a fruits.mdx file in\npages:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThen Nextra knows that the fruits key in _meta.json defines a folder with an\nindex page. If you click that folder in the sidebar, it will open the folder and\nshow you the fruits.mdx page at the same time.","external-links#External Links":"You can add external links to the sidebar by adding an item with href in\n_meta.json:\n\nTo always open the link in a new tab, enable the \"newWindow\": true option:\n\n\nYou can use this option to link to relative internal links too.","hidden-routes#Hidden Routes":"By default, all MDX routes in the filesystem will be shown on the sidebar. But\nyou can hide a specific pages or folders by using the \"display\": \"hidden\"\nconfiguration:\n\nThe page will still be accessible via the /contact URL, but it will not be\nshown in the sidebar.","navbar-items#Navbar Items":"","sub-docs#Sub Docs":"By defining a top-level page or folder as \"type\": \"page\", it will be shown as\na special page on the navigation bar, instead of the sidebar. With this feature,\nyou can have multiple \"sub docs\", and special pages or links such as \"Contact\nUs\" that are always visible.For example, you can have 2 docs folders frameworks and fruits in your\nproject:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn your top-level _meta.json file, you can set everything as a page, instead\nof a normal sidebar item:\n\nAnd it will look like this:\n\n\nLive example on StackBlitz\n↗\n(opens in a new tab)\nYou can also hide links like Home from the navbar with the\n\"display\": \"hidden\" option.","menus#Menus":"You can also add menus to the navbar using \"type\": \"menu\" and the \"items\"\noption:\n\n\nLive example on StackBlitz\n↗\n(opens in a new tab)","links#Links":"Same as the External Links option, you can have external\nlinks in the navbar too:","fallbacks#Fallbacks":"In the Sub Docs example above, we have to define the\n\"type\": \"page\" option for every page. To make it easier, you can use the \"*\"\nkey to define the fallback configuration for all items in this folder:\n\nThey are equivalent where all items have \"type\": \"page\" set.","separators#Separators":"You can use a \"placeholder\" item with \"type\": \"separator\" to create a\nseparator line between items in the sidebar:\n\n\nTogether with the\nsidebar.titleComponent theme\noption, you can customize the look of titles and separator lines in the\nsidebar.","advanced#Advanced":"","theme-components#Theme Components":"You can configure the theme for each page using the \"theme\" option. For\nexample, you can disable or enable specific components for specific pages:\n\nThis option will be inherited by all child pages if set to a folder.","layouts#Layouts":"By default, each page has \"layout\": \"default\" in their theme config, which is\nthe default behavior.","raw-layout#Raw Layout":"By default, Nextra renders the MDX content (such as h1, h2, h3 etc.) with\nthemed components, inside a content container. You can use the \"raw\" layout to\nlet Nextra to not inject any styles to the content:","full-layout#Full Layout":"You might want to render some page with the full container width and height, but\nkeep all the other styles. You can use the \"full\" layout to do that:","typesetting#Typesetting":"The \"typesetting\" option controls typesetting details like font features,\nheading styles and components like li and code. There are \"default\" and\n\"article\" typesettings available in the docs theme.The default one is suitable for most cases like documentation, but you can use\nthe \"article\" typesetting to make it look like an elegant article page:\n\n\nLive example on StackBlitz\n↗\n(opens in a new tab)"}},"/docs/docs-theme/start":{"title":"Docs Theme","data":{"":"Nextra Docs Theme is a theme that includes almost everything you need to build a modern documentation website. It includes a top navigation bar, a search bar, a pages sidebar, a TOC sidebar, and other built-in components.This website itself is built with the Nextra Docs Theme.","quick-start-from-template#Quick Start from Template":"","deploy-to-vercel#Deploy to Vercel":"You can start by creating your own Nextra site and deploying to Vercel by clicking the link:\n\nVercel will fork the Nextra Docs template and deploy the site for you. Once done, every commit in the repository will be deployed automatically.","fork-the-template#Fork the Template":"You can also manually fork the template repository.","start-as-new-project#Start as New Project":"","install#Install":"To create a Nextra Docs site manually, you have to install Next.js, React, Nextra, and Nextra Docs Theme. In your project directory, run the following command to install the dependencies:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you already have Next.js installed in your project, you only need to\ninstall nextra and nextra-theme-docs as the add-ons.","add-nextjs-config#Add Next.js Config":"Create the following next.config.js file in your project’s root directory:\n\nWith the above configuration, Nextra can handle Markdown files in your Next.js project, with the specified theme. Other Nextra configurations can be found in Guide.","create-docs-theme-config#Create Docs Theme Config":"Lastly, create the corresponding theme.config.jsx file in your project’s root directory. This will be used to configure the Nextra Docs theme:\n\nFull theme configurations can be found here.","ready-to-go#Ready to Go!":"Now, you can create your first MDX page as pages/index.mdx:\n\nAnd run the pnpm next command to start developing the project! 🎉\nNext, check out the next section to learn about organizing the documentation structure and configuring the website theme:"}},"/docs/docs-theme/theme-configuration":{"title":"Theme Configuration","data":{"":"The theme is configured with the\ntheme.config.jsx file. It\nshould export an object that contains your configurations, for example:\n\nDetailed information for each option is listed below.","global#Global":"","docs-repository#Docs Repository":"Set the repository URL of the documentation. It’s used to generate the\n“Edit this page” link and the “Feedback” link.","specify-a-path#Specify a Path":"If the documentation is inside a monorepo, a subfolder, or a different branch of\nthe repository, you can simply set the docsRepositoryBase to the root path of\nthe pages/ folder of your docs. For example:\n\nThen Nextra will automatically generate the correct file path for all pages.","seo-options#SEO Options":"You can configure SEO related settings via the useNextSeoProps option. The\nuseNextSeoProps function returns the props that will be passed to the\nNext SEO component.It is also a hook, so you can use APIs like useRouter inside to return values\nconditionally.\n\nFor example, we can have all pages rendering the same suffix for <title>:\n\n\n\nThe %s is a placeholder\nthat will be replaced by the page title.You can also return it conditionally to avoid adding the suffix to the homepage:","head-tags#Head Tags":"Configure the <head> tags of the website. You can add meta tags, title,\nfavicon, etc.","static-head-tags#Static head tags":"If you have only static head tags, it’s easy to directly put them in head. For\nexample:","dynamic-tags-based-on-page#Dynamic tags based on page":"You can also use a function component as head to dynamically generate the\nhead tags based on the current page’s front matter. For example:\n\nYou can refer to the useConfig API section\nfor more information about the useConfig hook and the frontMatter object.","dark-mode-and-themes#Dark Mode and Themes":"Customize the theme behavior of the website.","theme-color#Theme Color":"You can adjust the theme color of the website by setting a primary hue value to\ndark or light themes.\n\nTry it out for this website:","navbar#Navbar":"","logo#Logo":"The logo of the website rendered on the navbar. It can be a React node or a\nfunction component.\n\n\n\n\nLive example on StackBlitz\n↗\n(opens in a new tab)","project-link#Project Link":"Show a button that links to your project’s homepage on the navbar. By default,\nit links to Nextra’s GitHub repository.\n\nYou can configure project.link and project.icon to customize the project\nlink, for example make it link to your GitLab repository:\n\n\n\nIf icon is missing, it will be a\nGitHub icon by default.","chat-link#Chat Link":"Show a button that links to your project’s forum or other social media on the\nnavbar.\n\nYou can configure chat.link and chat.icon to customize the chat link, for\nexample make it link to your Twitter account:\n\nIf icon is missing, it will be a Discord icon by default.","menu-and-custom-links#Menu and Custom Links":"Check out Page Configuration\nto learn how to add custom menus or links to the navbar.","search#Search":"","banner#Banner":"Show a banner on the top of the website. It can be used to show a warning or a\nnotice.","banner-key#Banner key":"A banner can be dismissed. By default banner.key will be \"nextra-banner\" and\nit’s used by\nlocalStorage\nto keep the banner state (dismissed or not) on the client.If you have updated your banner text, you should change the key to make sure the\nbanner is shown again. The best practice is to always use a descriptive key for\nthe current text, for example:","customize-the-navbar#Customize the Navbar":"Customize the entire navbar component.","sidebar#Sidebar":"","menu-collapse-level#Menu Collapse Level":"By default, the sidebar menu is collapsed at level 2. You can change it by\nsetting sidebar.defaultMenuCollapseLevel to a different number. For example,\nwhen set to 1, every folder will be collapsed by default and when set to\nInfinity, all nested folders will be expanded by default.If sidebar.autoCollapse is set to true, then all folders that do not contain\nan active/focused route will automatically collapse up to the level set by\nsidebar.defaultMenuCollapseLevel. e.g. if defaultMenuCollapseLevel is 2,\nthen top-level folders will not auto-collapse.","customize-sidebar-content#Customize sidebar content":"Together with the Separators\nitem, you can customize how the sidebar content is rendered by using the\nsidebar.titleComponent option:\n\n\nLive example on StackBlitz\n↗\n(opens in a new tab)","content#Content":"","mdx-components#MDX Components":"Provide custom MDX components to\nrender the content. For example, you can use a custom pre component to render\ncode blocks.","writing-direction#Writing Direction":"The default writing direction of the website.","main-content#Main Content":"Render top and/or bottom content of main area of the page. It can be used to\nrender a comment section, a newsletter form, or any other type of content.","toc-sidebar#TOC Sidebar":"","table-of-contents#Table of Contents":"Show a table of contents on the right side of the page. It’s useful for\nnavigating between headings.","floating-toc#Floating TOC":"toc.float is enabled by default. When enabled, the TOC will be displayed on\nthe right side of the page and it will be sticky when scrolling. If it’s\ndisabled, the TOC will be displayed directly on the page sidebar.","edit-link#Edit Link":"Show an “Edit this page” link on the page that points to the file URL on GitHub\n(or other places).","feedback-link#Feedback Link":"The built-in feedback link provides a way for users to submit feedback about the\ndocumentation. By default, it’s a link that points to the issue creation form of\nthe docs repository, with the current website title prefilled:\nexample.\n\nTo disable it, you can set feedback.content to null.","end-of-page#End of Page":"","navigation#Navigation":"Show previous and next page links on the bottom of the content. It’s useful for\nnavigating between pages.\n\n\n\n\n\nThe above is also equivalent to navigation: true.","last-updated-date#Last Updated Date":"Show the last updated date of each page. It’s useful for showing the freshness\nof the content.","footer#Footer":"The footer area of the website. You can either specify some content for the\ndefault footer, or fully customize it with a custom component.","copyright-information#Copyright information":"You can add some simple content, such as copyright information to the default\nfooter:","theme-switch#Theme Switch":"","options#Options":"You are able to customize the option names for localization or other purposes:","error-pages#Error Pages":"","404---not-found#404 - Not Found":"","500---internal-server-error#500 - Internal Server Error":"","favicon-glyph-experimental#Favicon Glyph (Experimental)":"This isn’t supported by all browsers, but it’s a nice way to customize the\nfavicon of the website simply by using an emoji or character."}},"/docs/guide":{"title":"Guide","data":{"":"The following features are configured via the Next.js configuration and are\navailable in all themes."}},"/docs/guide/advanced":{"title":"Advanced","data":{"":""}},"/docs/guide/advanced/remote":{"title":"Remote Content","data":{"":"This page is a stub. Help us expand it by contributing!"}},"/docs/guide/advanced/table":{"title":"Rendering Tables","data":{"":"","gfm-syntax#GFM syntax":"In markdown is preferable write table via\nGFM syntax.\n\nwill be rendered as:\nleft\tcenter\tright\tfoo\tbar\tbaz\tbanana\tapple\tkiwi","html-literal-tables#HTML Literal Tables":"If you try to render the following literal <table />{:jsx} element:\n\nyou'll get the following result:\n\n\n\nleft\n\ncenter\n\nright\n\n\n\n\n\nfoo\n\nbar\n\nbaz\n\n\n\nbanana\n\napple\n\nkiwi\n\n\n\n\nConfused by unstyled elements? We explained here, why\nthis happens.","dynamic-tables#Dynamic Tables":"","how-to-write#How to Write":"Want to render dynamic table? You can use embedded JavaScript expressions into\nyour table for it:\n\nwill be rendered as:\n\n\n\nCountry\n\nFlag\n\n\n\n\n\n\nConfused by unstyled elements? We explain below 👇, why it's happens.","unexpected-result#Unexpected Result":"Table looks different compared to GFM syntax table:\nonly children of table body <tbody />{:jsx} is styled\ntable header is unstyled\ntable doesn't have margin top","why-this-happens#Why This Happens":"MDX2 doesn't replace literal HTML elements with <MDXProvider />{:jsx}.Adam Wathan, creator of Tailwind CSS submitted\nan issue in MDX2 to have some an\nescape hatch that we can name like:\nplease only transform markdown tags, not literal HTML tags\nTable header looks unstyled since not replaced with Nextra's MDX components\n<tr />{:jsx}, <th />{:jsx} and <td />{:jsx}, for the same reason\n<table />{:jsx} literal is not replaced and doesn't have default margin-top\naka mt-6.","ways-to-fix-it#Ways to Fix It":"","one-time-fix#One-Time Fix":"Just wrap your table with curly braces { and }, e.g.","changing-default-behaviour#Changing Default Behaviour":"If this thing is still confusing for you, and you want to use regular literal\nHTML elements for your tables, do the following:","install-remark-mdx-disable-explicit-jsx-package#Install remark-mdx-disable-explicit-jsx package":"","setup#Setup":"Configure plugin in nextra function inside next.config.mjs file"}},"/docs/guide/built-ins":{"title":"Built-ins","data":{"":"Nextra includes a couple of built-in components that you can use to better style\nyour documentation or blog:"}},"/docs/guide/built-ins/callout":{"title":"Callout Component","data":{"":"A built-in component to show important information to the reader.","example#Example":"A callout is a short piece of text intended to attract attention.\n\nA callout is a short piece of text intended to attract attention.\n\nA callout is a short piece of text intended to attract attention.\n\nA callout is a short piece of text intended to attract attention.","usage#Usage":"","default#Default":"Space Invaders is a 1978 shoot 'em up arcade game developed by Tomohiro\nNishikado.","info#Info":"Today is Friday.","warning#Warning":"This API will be deprecated soon.","error#Error":"This is a dangerous feature that can cause everything to explode.","api#API":"The Callout component takes the following props:","type-optional#type (optional)":"The type of the Callout.\nType: 'default' | 'info' | 'warning' | 'error'\nDefault: 'default'","emoji-optional#emoji (optional)":"The icon to show in the Callout. You can also show your custom icon using this\nprop.\nType: ReactNode\nDefault: '💡'","children-optional#children (optional)":"The content of the Callout.\nType: ReactNode\nDefault: null"}},"/docs/guide/i18n":{"title":"Next.js I18n","data":{"":"This feature is only available in the docs theme.\nNextra supports\nNext.js Internationalized Routing\nout of the box. These docs explain how to configure and use it.","add-i18n-config#Add I18n Config":"To add multi-language pages to your Nextra application, you need to config\ni18n in next.config.js first:","add-middleware#Add Middleware":"Then, you need to add a middleware.js file in the root of your project\n(related Next.js docs):\n\nIf you already have the middleware defined, you can do this instead:","add-locale-to-filenames#Add Locale to Filenames":"Then, add the locale codes to your file extensions (required for the default\nlocale too):","configure-the-docs-theme#Configure the Docs Theme":"Finally, add the i18n option to your theme.config.jsx to configure the\nlanguage dropdown:"}},"/docs/guide/image":{"title":"Next.js Image","data":{"":"The standard way to use\nNext.js Image\ninside MDX is to directly import the component:","static-image#Static Image":"This feature is enabled via staticImage: true in the Nextra config by\ndefault.\nNextra supports automatically optimizing your static image imports with the\nMarkdown syntax. You do not need to specify the width and height of the image,\njust use the ![]() Markdown syntax:\n\nThis loads the demo.png file inside the public folder, and automatically\nwraps it with Next.js <Image>.\nYou can also use ![](../public/demo.png) to load the image from a relative\npath, if you don't want to host it via public.\nWith Next.js Image, there will be no layout shift, and a beautiful blurry\nplaceholder will be shown by default when loading the images:"}},"/docs/guide/latex":{"title":"LaTeX","data":{"":"Nextra uses KaTeX to render LaTeX expressions directly in MDX.\nTo enable LaTeX support, you must enable the latex option in your next.config.js file:\n\nWhen enabled, KaTeX’s CSS and fonts will be automatically included in your site, and you can start writing math expressions in your MDX files. Using LaTeX within MDX is as simple as wrapping your expression in $ or $$.","example#Example":"For example, the following Markdown code:\n\nwill be rendered as:\nThe Pythagorean equation: .\nYou can still use Markdown and MDX syntax in the same line as your LaTeX expression.\nIf you want to display $ in your content instead of rendering it as an\nequation, you can escape it with a backslash (\\). For example \\$e = mc^2\\$\nwill be rendered as $e = mc^2$.","api#API":"To learn more about KaTeX and its supported functions and conventions, visit KaTeX’s documentation."}},"/docs/guide/link":{"title":"Next.js Link","data":{"":"All relative Markdown links are automatically converted to Next.js links. This\nmeans that the target page will be prefetched. And when you click on a link, the\npage will be loaded on the client-side like a SPA, without making a full page\nload. For example:\n\nWill be equivalent to:\n\nThis feature makes navigation between Nextra pages fast and seamless."}},"/docs/guide/markdown":{"title":"Markdown","data":{"":"","mdx#MDX":"With Nextra, all your .mdx files under the pages directory will be rendered\nwith MDX, it's an advanced Markdown format with React\ncomponent support.For example, you can use import and use React components inside your Markdown\nfiles like this:\n\nGenerates:\n\n\nHello MDX\n\nClicks:\n\n\nBesides basic MDX, Nextra also has some advanced Markdown features built-in.","github-flavored-markdown#GitHub Flavored Markdown":"GFM is an extension of Markdown, created by\nGitHub, that adds support for strikethrough, task lists, tables, and more.","strikethrough#Strikethrough":"removed","task-list#Task List":"Write the press release\nUpdate the website\nContact the media","table#Table":"Syntax\tDescription\tTest Text\tHeader\tTitle\tHere's this\tParagraph\tText\tAnd more\tStrikethrough\t\tText","autolinks#Autolinks":"Visit https://nextjs.org.","custom-heading-id#Custom Heading Id":"You can specify custom heading id using the format ## My heading [#custom-id].\nFor example:\n\nIn this example, #about-nextra will be used as the heading link, replacing the\ndefault #long-heading-about-nextra.","extended-syntax-highlighting#Extended Syntax Highlighting":"Check out the Syntax Highlighting section for more information:"}},"/docs/guide/mermaid":{"title":"Mermaid","data":{"":"Nextra supports mermaid diagrams. Like in GitHub you\ncan use it in your markdown files by using the mermaid code block language.\nOut of the box, Nextra uses\n@theguild/remark-mermaid\npackage that replaces the code block with the <Mermaid /> component.","example#Example":"","usage#Usage":""}},"/docs/guide/organize-files":{"title":"Organize Files","data":{"":"Nextra first collects all your Markdown files and configurations from the\npages directory, and then generates the “page map information” of your entire\nsite, to render things such as the navigation bar and sidebar below:\n\n\n\n\n\nExample: Nextra Docs Theme has sidebar and navbar\ngenerated automatically from Markdown files.","default-behavior#Default Behavior":"By default, the page map contains all .md and .mdx filenames and the\ndirectory structure, sorted alphabetically. Then, Nextra will use the\ntitle package to get formatted page names\nfrom filenames.For example if you have the following structure:\n\nThe resolved page map will be (note that all names were sorted alphabetically):\n\nAnd the global page map will be bundled to each page by Nextra. Then, configured\ntheme will render the actual UI with that page map.","_metajson#_meta.json":"It’s very common to customize each page's title, rather than just using the\nfilename. For example, it doesn't make sense to have a page titled “Index”, but\ninstead have a page titled “Home”.That’s where _meta.json comes in. You can have an _meta.json file in each\ndirectory, and it will be used to override the default configuration of each\npage:\n\nAnd you can put this in your pages/_meta.json file:\n\nIt tells Nextra the order of each page, and the correct title. Alternatively,\nyou can do it with title and have other configurations in there as well:\n\nThe extra configurations are passed to the theme as additional information.\nCheck the corresponding pages for more information:"}},"/docs/guide/syntax-highlighting":{"title":"Syntax Highlighting","data":{"":"Nextra uses Shiki to do syntax highlighting at build\ntime. It’s very reliable and performant. For example, adding this in your\nMarkdown file:\n\nResults in:","features#Features":"","inlined-code#Inlined Code":"Inlined syntax highlighting like let x = 1{:jsx} is also supported via the\n{:} syntax:","highlighting-lines#Highlighting Lines":"You can highlight specific lines of code by adding a {} attribute to the code\nblock:\n\nResult:","highlighting-substrings#Highlighting Substrings":"You can highlight specific substrings of code by adding a // attribute to the\ncode block:\n\n\n\nYou can highlight only a part of the occurrences of that substring by adding a\nnumber it: /str/1, or multiple: /str/1-3, /str/1,3.","copy-button#Copy Button":"By adding a copy attribute, a copy button will be added to the code block when\nthe user hovers over it:\n\nRenders:\n\nYou can enable this feature globally by setting defaultShowCopyCode: true in\nyour Nextra configuration (next.config.js file). Once it's enabled globally,\nyou can disable it via the copy=false attribute.","line-numbers#Line Numbers":"You can add line numbers to your code blocks by adding a showLineNumbers\nattribute:\n\nRenders:","filenames-and-titles#Filenames and Titles":"You can add a filename or a title to your code blocks by adding a filename\nattribute:\n\nRenders:","ansi-highlighting#ANSI Highlighting":"You can highlight ANSI escape codes:\n\nRenders:","supported-languages#Supported Languages":"Check this list\nfor all supported languages.","customize-the-theme#Customize The Theme":"Nextra uses CSS variables to define the colors for tokens. You can inject a\nglobal CSS\nto customize them under light/dark themes. For example this is the default\ntokens and you can override any of these:","with-dynamic-content#With Dynamic Content":"Since syntax highlighting is done at build time, you can’t use dynamic content\nin your code blocks. However, since MDX is very powerful there is a workaround\nvia client JS. For example:\n\n\n\nThis workaround has a limitation that updated content won't be re-highlighted.\nFor example if we update the number to 1 + 1, it will be incorrectly\nhighlighted.Check out the\ncode\nto see how it works.","disable-syntax-highlighting#Disable Syntax Highlighting":"You can opt out of syntax highlighting for using one of your own. You can\ndisable syntax highlighting globally by setting codeHighlight: false in your\nNextra configuration (next.config.js file)."}},"/docs/guide/typescript":{"title":"TypeScript","data":{"":"This page is a stub. Help us expand it by contributing!"}},"/docs":{"title":"Nextra","data":{"":"Nextra is a framework on top of Next.js, that lets you build content focused\nwebsites. It has all the great features from Next.js, plus extra power to create\nMarkdown-based content with ease.","quick-start#Quick Start":"To start using Nextra, you need to select a theme first:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to use Nextra without a preset theme, or build your own theme, you\ncan follow the Custom Theme docs."}},"/":{"title":"Nextra – Next.js Static Site Generator","data":{"":"Make beautiful websites with Next.js & MDX.\n\nSimple, powerful and flexible site generation framework with everything you love from Next.js.\n\n\nGet started →\n\n\n\n\n\n\n\n\n\n\n\n\n\nFull-power documentation in minutes.\n\n\n\n\nLinks and images are always optimized.\n\nNextra automatically converts Markdown links and images to use Next.js Link and Next.js Image when possible. No slow navigation or layout shift.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced syntax highlighting solution.\n\nPerformant and reliable build-time syntax highlighting powered by Shiki.\n\n\n\nI18n as easy as creating new files.\n\nName your page files with locales suffixed, Nextra and Next.js will do the rest for you.\n\n\n\n\n\n\n\n\n\nMDX 2 lets you use Components inside Markdown, with huge performance boost since v1.\n\n\n\n\n\nDark mode included.\n\n\n\n\nFull-text search, zero-config needed.\n\nNextra indexes your content automatically at build-time and performs incredibly fast full-text search via FlexSearch.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrganize pages intuitively, with file-system routing from Next.js.\n\n\n\nA11y as a top priority.\n\nNextra respects system options such as Increase Contrast and Reduce Motion.\n\n\n\nHybrid rendering, next generation.\n\nYou can leverage the hybrid rendering power from Next.js with your Markdown content including SSG, SSR, and ISR.\n\n\n\nAnd more...\n\nSEO / RTL Layout / Pluggable Themes / Built-in Components / Last Git Edit Time / Multi-Docs...A lot of new possibilities to be explored.\n\nStart using Nextra →"}},"/docs/guide/ssg":{"title":"Next.js SSG","data":{"":"With Next.js, you can pre-render your page using\nStatic Generation (SSG).\nYour pages will be generated at build time and statically served to visitors. It\ncan also be cached by a CDN to maximize the performance.This is supported by Nextra too. Here's an example:\nNextra has  stars on GitHub!\nThe number above was generated at build time via getStaticProps. With\nIncremental Static Regeneration\nenabled, it will be kept up to date.Here's the MDX code for the example above:"}},"/showcase":{"title":"Showcase","data":{"":""}}}